---
title: Handle Stack Traces
owner: Partners
---

This topic describes how to handle stack traces with a9s LogMe for PCF.

## <a id='handle-stack-traces'></a> Handle Stack Traces

Java stack traces typically contain more than one line of content and Logstash
and the syslog protocol do not support multi-line log-events. However, it
is possible to encode the newline character `\n` as `\u2028` (line separator).
Logstash then reads the stack trace as one log-event and saves it to Elasticsearch
with the line separator converted back to newline for readability. Without this fix,
each line of the stack trace would show up as an event of its own in Elasticsearch.

The application needs to be configured to use the `\u2028` line separator
instead of the default `\n` line separator. This should be done by configuring
the application logging accordingly.

Below is an example for Java Spring applications.

### <a id='java-spring'></a> Java Spring

To have your exceptions recognized as one event instead of many one-lined
events by Logstash, you need to change your log format.

#### <a id='application-properties'></a> application.properties

To do this, you can add the following snippet to `logging.pattern.console` in the
`application.properties` file of your Java Spring application:

```
%replace(%xException){'\n','\u2028'}%nopex
```

With this snippet, every line feed `\n` in the stack trace is converted
into `\u2028` (line separator). The `%nopex` part means that the original text is
not logged.
&nbsp;
If your logging config is just this:

```
logging.pattern.console=%replace(%xException){'\n','\u2028'}%nopex%s
```

Then you only log exceptions. As you probably want to log other events too,
you can add the snippet above to an existing config.
&nbsp;
Assume that your logging config is currently the following:

```
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
```

This just prints the date, time and then the log message. The `%n` at the end
is of course the newline and probably also the last thing youâ€™ll output per
logged event. To add the replace rule to this config, place it in the very
end, but before the final `%n` so that your exception is still terminated
by a newline.

```
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%replace(%xException){'\n','\u2028'}%nopex%n
```

This causes your regular logging events to print as usual and only exceptions
(or rather: their stack traces) are manipulated.

#### <a id='yaml-xml-logging'></a> Yaml or XML logging configurations

In case you use a yaml or xml based format, the method is still the same, just
add the snippet above just before the final newline of your logging pattern.
&nbsp;
Say this is your logback-spring.xml:

```xml
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss} - %msg%n</pattern>
    </encoder>
  </appender>
  <root level="debug">
    <appender-ref ref="STDOUT" />
  </root>
</configuration>
```

You have to make same kind of change as for `application.properties`, but you
have to do it for every class that may log exceptions to stdout. For this
example the logback-spring.xml would look like so:

```xml
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{yyyy-MM-dd HH:mm:ss} - %msg%replace(%xException){'\n','\u2028'}%nopex%n</pattern>
    </encoder>
  </appender>
  <root level="debug">
    <appender-ref ref="STDOUT" />
  </root>
</configuration>
```

This solution works for any type of logging configuration, as long it
supports the replace-format of the code snippet `%replace(%xException){'\n','\u2028'}%nopex.`
